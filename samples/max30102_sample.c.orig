#include "max30102.h"
#include "max30102_algorithm.h"
#include "algorithm.h"
#include <stdio.h>
int max30102_sample()
{
    const rt_uint8_t RATE_SIZE = 4; //Increase this for more averaging. 4 is good.
    rt_uint8_t rates[RATE_SIZE];     //Array of heart rates
    rt_uint8_t rateSpot = 0;
    rt_tick_t lastBeat  = 0;
    float  beatsPerMinute;
    int beatAvg = 0;
    if(max30102_mode_wakeup() != RT_EOK)
        return -RT_ERROR;
	rt_tick_t time =  rt_tick_get();
    while(1)
    {
        if(checkForBeat(max30102_get_per_sample(2)) == RT_TRUE)
        {
            rt_tick_t delta = rt_tick_get()- lastBeat;
            lastBeat  = rt_tick_get();
            beatsPerMinute = 60 / (delta / 1000.0);
            if (beatsPerMinute < 255 && beatsPerMinute > 20)
            {
                rates[rateSpot++] = (rt_uint8_t)beatsPerMinute; 
                rateSpot %= RATE_SIZE; 
                beatAvg = 0;
                for (rt_uint8_t x = 0 ; x < RATE_SIZE ; x++)
                    beatAvg += rates[x];
                beatAvg /= RATE_SIZE;
            }
		  printf("BPM=%.1f,Avg BPM=%d\r\n",beatsPerMinute,beatAvg);
			 
        }
		if(((rt_tick_get() - time)/1000)>= 30)
			break;
    }
    if(max30102_mode_shutdown() != RT_EOK)
        return -RT_ERROR;
    return RT_EOK;
}

int max30102_spo2(void)
{
	uint32_t aun_ir_buffer[100]; //IR LED sensor data
	int32_t n_ir_buffer_length = 100;    //data length
	uint32_t aun_red_buffer[100];    //Red LED sensor data
	int32_t n_sp02; //SPO2 value
	int8_t ch_spo2_valid;   //indicator to show if the SP02 calculation is valid
	int32_t n_heart_rate;   //heart rate value
	int8_t  ch_hr_valid;    //indicator to show if the heart rate calculation is valid
	if(max30102_mode_wakeup() != RT_EOK)
        return -RT_ERROR;
	rt_tick_t time =  rt_tick_get();
	while(1)
	{
		max30102_get_data(aun_red_buffer,aun_ir_buffer,100);
		maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
		printf(", HR=%i, ", n_heart_rate);
		printf("HRvalid=%i, ", ch_hr_valid);
		printf("SpO2=%i, ", n_sp02);
		printf("SPO2Valid=%i\r\n", ch_spo2_valid);
	
				if(((rt_tick_get() - time)/1000)>= 30)
			break;
	}
	    if(max30102_mode_shutdown() != RT_EOK)
        return -RT_ERROR;
	return RT_EOK;
}

MSH_CMD_EXPORT(max30102_sample, max30102 sample);
MSH_CMD_EXPORT(max30102_spo2, max30102 spo2 );